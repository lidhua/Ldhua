gninx 网页部署：  (通过./configure --help 查看该软件支持的模块(--with)

yum -y install gcc pcre-devel openssl-devel       //安装依赖包 
useradd -s /sbin/nologin nginx
cd /opt/nginx-1.10.3/
./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module
 make && make install

nginx命令的用法

    [root@proxy ~]# /usr/local/nginx/sbin/nginx                    //启动服务
    [root@proxy ~]# /usr/local/nginx/sbin/nginx -s stop            //关闭服务
    [root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload        //重新加载配置文件
    [root@proxy ~]# /usr/local/nginx/sbin/nginx –V                //查看软件信息
    [root@proxy ~]# ln -s /usr/local/nginx/sbin/nginx /sbin/        //方便后期使用

(ss) netstat  -anptu  |  grep nginx

##############################################################################################################
升级：
cd nginx-1.12.2

./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module
 make 

 mv /usr/local/nginx/sbin/nginx   /usr/local/nginx/sbin/nginxold

cp objs/nginx  /usr/local/nginx/sbin/

 make upgrade   
 /usr/local/nginx/sbin/nginx –v
#############################################################################################################3 

    访问Web页面需要进行用户认证
    用户名为：tom，密码为：123456
 vim  /usr/local/nginx/conf/nginx.conf
server {
        listen       80;
        server_name  localhost;
        auth_basic "Input Password:";                        //认证提示符
        auth_basic_user_file "/usr/local/nginx/pass";        //认证密码文件
        location / {
            root   html;
            index  index.html index.htm;
        }
  }

生成密码文件，创建用户及密码
使用htpasswd命令创建账户文件，需要确保系统中已经安装了httpd-tools。
 yum -y install  httpd-tools
htpasswd -c /usr/local/nginx/pass   tom        //创建密码文件
htpasswd  /usr/local/nginx/pass   jerry      //追加用户，不使用-c选项
/usr/local/nginx/sbin/nginx -s reload    //重新加载配置文件 

 基于域名的虚拟主机 
 vim /usr/local/nginx/conf/nginx.conf

server {
        listen       80;                                      //端口
        server_name  www.a.com;                                //域名
auth_basic "Input Password:";                        //认证提示符
        auth_basic_user_file "/usr/local/nginx/pass";        //认证密码文件
location / {
            root   www;                                    //指定网站根路径
            index  index.html index.htm;
       }
       
}
mkdir /usr/local/nginx/www
echo "www" > /usr/local/nginx/www/index.html
/usr/local/nginx/sbin/nginx -s reload


非对称算法有：RSA、DSA，主要应用在网络数据加密。
1）生成私钥与证书
cd /usr/local/nginx/conf
openssl genrsa > cert.key          //生成私钥
 openssl req -new -x509 -key cert.key > cert.pem      //生成证书   开头cn
2）修改Nginx配置文件，设置加密网站的虚拟主机

[root@proxy ~]# vim  /usr/local/nginx/conf/nginx.conf
… …    
server {
        listen       443 ssl;
        server_name            www.c.com;
        ssl_certificate      cert.pem;         #这里是证书文件
        ssl_certificate_key  cert.key;         #这里是私钥文件
        ssl_session_cache    share[root@proxy ~]# vim  /usr/local/nginx/conf/nginx.conf
… …    
server {
        listen       443 ssl;
        server_name            www.c.com;
        ssl_certificate      cert.pem;         #这里是证书文件
        ssl_certificate_key  cert.key;         #这里是私钥文件
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;
        location / {
            root   html;
            index  index.html index.htm;
        }
d:SSL:1m;
        ssl_session_timeout  5m;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;
        location / {
            root   html;
            index  index.html index.htm;
        }
}

/usr/local/nginx/sbin/nginx -s reload
 firefox https://www.c.com            //信任证书后可以访问

md5sum /etc/passwd  信息摘要：MD5、sha256，主要应用在数据完整性校验、数据秒传等。


tailf 看日记文件


    charset utf-8; 支持8中语言。

################################################################################################################
部署LNMP环境
安装部署Nginx、MariaDB、PHP环境
在RHEL7系统中，源码安装Nginx，使用RPM包安装MariaDB、PHP、PHP-FPM软件。
操作过程中需要安装的软件列表如下：
nginx
mariadb、mariadb-server、mariadb-devel
php、php-fpm、php-mysql
使用yum安装基础依赖包
[root@proxy ~]# yum -y install gcc openssl-devel pcre-devel zlib-devel
 # cd nginx-1.12.2
 # ./configure --user=nginx --group=nginx --with-http_ssl_module
 [root@proxy ~]# make && make install

安装MariaDB
Mariadb在新版RHEL7光盘中包含有该软件，配置yum源后可以直接使用yum安装：
[root@proxy ~]# yum -y install   mariadb   mariadb-server   mariadb-devel

php和php-fpm(该软件包在lnmp_soft中提供)
[root@proxy ~]# yum -y  install  php   php-mysql
[root@proxy ~]# yum -y  install php-fpm-5.4.16-42.el7.x86_64.rpm

[root@proxy ~]# systemctl stop httpd                //如果该服务存在则关闭该服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx             //启动Nginx服务
[root@proxy ~]# netstat -utnlp | grep :80
tcp    0    0 0.0.0.0:80        0.0.0.0:*        LISTEN        32428/nginx         

启动MySQL服务
[root@proxy ~]# systemctl start  mariadb           //启动服务器
[root@proxy ~]# systemctl status mariadb           //查看服务状态
[root@proxy ~]# systemctl enable mariadb           //设置开机启动

启动PHP-FPM服务
[root@proxy ~]# systemctl start php-fpm           //启动服务
[root@proxy ~]# systemctl status php-fpm          //查看服务状态
[root@proxy ~]# systemctl enable php-fpm          //设置开机启动

***********************************************************************************************************
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
## 文件里面有只需要把注释去掉。只需改最后一行就行。
 
location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;    #将请求转发给本机9000端口，PHP解释器
            fastcgi_index  index.php;                                                  {动态页面}
            #fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;   改：：
        }

[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload     起服务

步骤三：创建PHP页面，测试LNMP架构能否解析PHP页面
1）创建PHP测试页面1，可以参考lnmp_soft/php_scripts/test.php：
[root@proxy ~]# vim /usr/local/nginx/html/test1.php
<?php
$i="This is a test Page";
echo $i;
?>

2）创建PHP测试页面,连接并查询MariaDB数据库。
可以参考lnmp_soft/php_scripts/mysql.php:(拷贝)
[root@proxy ~]# vim /usr/local/nginx/html/test2.php

客户端使用浏览器访问服务器PHP首页文档，检验是否成功：
[root@client ~]# firefox http://192.168.4.5/test1.php
[root@client ~]# firefox http://192.168.4.5/test2.php

4）LNMP常见问题
Nginx的默认访问日志文件为/usr/local/nginx/logs/access.log
Nginx的默认错误日志文件为/usr/local/nginx/logs/error.log
PHP默认错误日志文件为/var/log/php-fpm/www-error.log
如果动态网站访问失败，可用参考错误日志，查找错误信息。

################################################################3333
访问a.html重定向到b.html（跳转地址栏）
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
在server的后面加上下面这句话：
rewrite /a.html  /b.html  redirect; 
[root@proxy ~]# /usr/local/nginx/sbin/nginx  -s  reload   重新加载配置文件   

[root@proxy ~]# echo "BB" > /usr/local/nginx/html/b.html  //写一个B的测试页面，不要写A的

[root@client ~]# firefox  http://192.168.4.5/a.html        客户端测试A跳的B页面。
 
##############################################################################3
修改配置文件(访问192.168.4.5/下面子页面，重定向至www.tmooc.cn/下相同的页面)
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
在location / { 前面加上这句话：
rewrite ^/(.*)$ http://www.tmooc.cn/$1;

 /usr/local/nginx/sbin/nginx  -s  reload  重新加载配置文件

[root@room9pc01 ~]# firefox  http://192.168.4.5        客户端测试（真实机测试，真实机才可以连接tmooc）
[root@room9pc01 ~]# firefox  http://192.168.4.5/test
##############################################################################################
修改配置文件(实现curl和火狐访问相同链接返回的页面不同)
创建网页目录以及对应的页面文件：
 echo "I am Normal page" > /usr/local/nginx/html/test.html
 echo "firefox page" > /usr/local/nginx/html/firefox/test.html
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
在index  index.html index.htm;后面加这句：：
#这里，~符号代表正则匹配，*符号代表不区分大小写
if ($http_user_agent ~* firefox) {            //识别客户端firefox浏览器
rewrite ^(.*)$ /firefox/$1;

[root@proxy ~]# /usr/local/nginx/sbin/nginx  -s  reload       重新加载配置文件 

[root@client ~]# firefox  http://192.168.4.5/test.html       客户端测试  
[root@client ~]# curl     http://192.168.4.5/test.html

5）地址重写格式【总结】
rewrite 旧地址 新地址 [选项];
last 不再读其他rewrite
break 不再读其他语句，结束请求
redirect 临时重定向
permament 永久重定向

###########################################################################################
Nginx反向代理
部署后端Web1服务器
[root@web1 ~]# yum  -y  install  httpd
[root@web1 ~]# echo "192.168.2.100" > /var/www/html/index.html
部署后端Web2服务器
[root@web2 ~]# yum  -y  install  httpd
[root@web2 ~]# echo "192.168.2.200" > /var/www/html/index.html
配置Nginx服务器，添加服务器池，实现反向代理功能
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
在http{  的下面加。。。。
upstream webserver {
                server 192.168.2.100:80;            访问2次2百才访问一次1百，2次出错，起服务10妙后生效。 
                server 192.168.2.200:80;    (server 192.168.2.200 weight=2 max_fails=2 fail_timeout=10;)
        }                                                           不写默认为1
在server { 的   location / { 的下面加
proxy_pass http://webserver;

[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
客户端使用浏览器访问代理服务器测试轮询效果

*******************************************************************88
Nginx的TCP/UDP调度器
编译安装必须要使用--with-stream参数开启4层代理模块。

    [root@proxy ~]# yum –y install gcc pcre-devel openssl-devel        //安装依赖包
    [root@proxy ~]# tar  -xf   nginx-1.12.2.tar.gz
    [root@proxy ~]# cd  nginx-1.12.2
    [root@proxy nginx-1.12.2]# ./configure   \
    > --with-http_ssl_module                                //开启SSL加密功能
    > --with-stream                                       //开启4层反向代理功能
    [root@proxy nginx-1.12.2]# make && make install           //编译并安装

步骤二：配置Nginx服务器，添加服务器池，实现TCP/UDP反向代理功能

1）修改/usr/local/nginx/conf/nginx.conf配置文件

    [root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    stream {
                upstream backend {
                   server 192.168.2.100:22;            //后端SSH服务器的IP和端口
                   server 192.168.2.200:22;
    }
                server {
                    listen 12345;                    //Nginx监听的端口
                    proxy_connect_timeout 1s;
                    proxy_timeout 3s;
                     proxy_pass backend;
                 }
    }
    http {
    .. ..
    }

/usr/local/nginx/sbin/nginx -s reload    重启nginx服务   
 如果报错执行（killall nginx）在起服务
）客户端使用访问代理服务器测试轮询效果

    [root@client ~]# ssh 192.168.4.5 -p 12345            //使用该命令多次访问查看效果

*******************************************************************************************8
Nginx常见问题处理
> --with-stream                                        //开启TCP/UDP代理模块
：优化Nginx并发量
优化前使用ab高并发测试

    [root@proxy ~]# ab -n 2000 -c 2000 http://192.168.4.5/
    Benchmarking 192.168.4.5 (be patient)
    socket: Too many open files (24)                //提示打开文件数量过多

修改Nginx配置文件，增加并发量

    [root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    worker_processes  2;                    //与CPU核心数量一致
    events {
    worker_connections 65535;        //每个worker最大并发连接数
    use epoll;
    }
    
[root@room9pc01 ~]# grep processor /proc/cpuinfo  4核/CPU核心数量
processor	: 0
processor	: 1
processor	: 2
processor	: 3

优化Linux内核参数（最大文件数量）

    [root@proxy ~]# ulimit -a                        //查看所有属性值
    [root@proxy ~]# ulimit -Hn 100000                //设置硬限制（临时规则）通过./configure --help 查看该软件支持的模块(--with
    [root@proxy ~]# ulimit -Sn 100000                //设置软限制（临时规则）
    [root@proxy ~]# vim /etc/security/limits.conf
        .. ..
    *               soft    nofile            100000
    *               hard    nofile            100000

优化后测试服务器并发量（因为客户端没调内核参数，所以在proxy测试）

    [root@proxy ~]# ab -n 2000 -c 2000 http://192.168.4.5/
*********************************************************************

优化Nginx数据包头缓存 (414)
修改Nginx配置文件，增加数据包头部缓存大小

    [root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    http {
    client_header_buffer_size    1k;        //默认请求包头信息的缓存    
    large_client_header_buffers  4 4k;        //大请求包头部信息的缓存个数与容量
    .. ..
    }
*******************************************************************
浏览器本地缓存静态数据
修改Nginx配置文件，定义对静态页面的缓存时间

    [root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    server {
            listen       80;
            server_name  localhost;
            location / {
                root   html;
                index  index.html index.htm;
            }
    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
    expires        30d;            //定义客户端缓存时间为30天
    }
    }
    [root@proxy ~]# cp /usr/share/backgrounds/day.jpg /usr/local/nginx/html
    [root@proxy ~]# nginx -s reload
    #请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
    #[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)

优化后，使用Firefox浏览器访问图片，再次查看缓存信息

    [root@client ~]# firefox http://192.168.4.5/day.jpg
*******************************************************************
自定义报错页面(404)
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
配置文件有把注释去掉。
error_page   404  /404.html;    //自定义错误页面

刷新服务
[root@proxy ~]# vim /usr/local/nginx/html/404.html        //生成错误页面
Oops,No NO no page …  //内容

优化后，客户端使用浏览器访问不存在的页面，会提示自己定义的40x.html页面

    [root@client ~]# firefox http://192.168.4.5/xxxxx        //访问一个不存在的页面
*********************************************************************
：如何查看服务器状态信息
）编译安装时使用--with-http_stub_status_module开启状态页面模块
修改Nginx配置文件，定义状态页面

    [root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
    在 location / {
            root   html;
            index  index.html index.htm;
        }
的后面插写下面这句。
location /status {
                stub_status on;
        }
重新刷新服务

优化后，查看状态页面信息

    [root@proxy ~]# curl  http://192.168.4.5/status
    Active connections: 1 
    server accepts handled requests
     10 10 3 
    Reading: 0 Writing: 1 Waiting: 0

Active connections：当前活动的连接数量。
Accepts：已经接受客户端的连接总数量。
Handled：已经处理客户端的连接总数量（一般与accepts一致，除非服务器限制了连接数量）。
Requests：客户端发送的请求数量。
Reading：当前服务器正在读取客户端请求头的数量。
Writing：当前服务器正在写响应信息的数量。
Waiting：当前多少客户端在等待服务器的响应。
*****************************************************************
步骤七：对页面进行压缩处理

1）修改Nginx配置文件

    [root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
    http {
    .. ..
    gzip on;                            //开启压缩
    gzip_min_length 1000;                //小文件不压缩
    gzip_comp_level 4;                //压缩比率
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                                        //对特定文件压缩，类型参考mime.types
    .. ..
    }
*******************************************************************
步骤八：服务器内存缓存

1）如果需要处理大量静态文件，可以将文件缓存在内存，下次访问会更快。

    http { 
    open_file_cache          max=2000  inactive=20s;
            open_file_cache_valid    60s;
            open_file_cache_min_uses 5;
            open_file_cache_errors   off;
    //设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
    //文件句柄的有效时间是60秒，60秒后过期
    //只有访问次数超过5次会被缓存
    } 
#################################################################
构建memcached服务
[root@proxy ~]# yum -y  install   memcached

memcached配置文件（查看即可，不需要修改）
[root@proxy ~]# vim /usr/lib/systemd/system/memcached.service
[root@proxy ~]# vim /etc/sysconfig/memcached

使用telnet访问memcached服务器
[root@proxy ~]# yum -y install telnet
使用telnet连接服务器测试memcached服务器功能，包括增、删、改、查等操作。

{{{{[root@proxy ~]# telnet  192.168.4.5  11211
##提示：0表示不压缩，180为数据缓存时间，3为需要存储的数据字节数量。
set name 0 180 3                //定义变量，变量名称为name
plj                            //输入变量的值，值为plj                
STORED
get name                        //获取变量的值
VALUE name 0 3                 //输出结果
plj
END
##提示：0表示不压缩，180为数据缓存时间，3为需要存储的数据字节数量。
add myname 0 180 10            //新建，myname不存在则添加，存在则报错
set myname 0 180 10            //添加或替换变量
replace myname 0 180 10        //替换，如果myname不存在则报错
get myname                    //读取变量
append myname 0 180 10        //向变量中追加数据
delete myname                    //删除变量
stats                        //查看状态
flush_all                        //清空所有
quit                            //退出登录}}}}                             


部署LNMP环境（如果环境中已经存在LNMP环境本步骤可以忽略）
 yum -y install gcc openssl-devel pcre-devel zlib-devel
）源码安装Nginx
[root@proxy ~]# tar -xf nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]#  ./configure   \
> --with-http_ssl_module 
[root@proxy nginx-1.12.2]# make && make install
[root@proxy ~]# yum -y install  mariadb  mariadb-server  mariadb-devel      安装MariaDB数据库

[root@proxy ~]# yum -y install  php  php-mysql                       安装PHP
[root@proxy ~]# yum -y install  php-fpm-5.4.16-42.el7.x86_64.rpm     

修改Nginx配置文件

1）启动Nginx服务
2）启动MySQL服务
3）启动PHP-FPM服务
4）关闭SELinux、防火墙

1）部署测试页面
 [root@proxy ~]# vim /usr/local/nginx/html/test.php
<?php
$memcache=new Memcache;                //创建memcache对象
$memcache->connect('localhost',11211) or die ('could not connect!!');
$memcache->set('key','test');             //定义变量
$get_values=$memcache->get('key');        //获取变量值
echo $get_values;
?> 

yum search memcache  查看需要给PHP安装扩展模块才可以连接memcached数据库。
为PHP添加memcache扩展
[root@proxy ~]# yum -y install  php-pecl-memcache
[root@proxy ~]# systemctl restart php-fpm

客户端再次测试（结果会成功显示数据结果）
[root@client ~]# firefox http://192.168.4.5/test.php
###############################################################################
部署后端LNMP服务器相关软件
注意:以下部署LNMP服务器的操作，需要在两台后端服务器做相同的操作，下面我们以一台Web1服务器（192.168.2.100）为例，对Web2服务器执行相同操作即可。
 yum -y install gcc openssl-devel pcre-devel zlib-devel      使用yum安装基础依赖包
 
2）源码安装Nginx
[root@web1 ~]# tar -xf nginx-1.12.2.tar.gz
[root@web1 ~]# cd nginx-1.12.2
[root@web1 nginx-1.12.2]#  ./configure   \
> --with-http_ssl_module 
[root@web1 nginx-1.12.2]# make && make install
 yum -y install  mariadb  mariadb-server  mariadb-devel   安装MariaDB数据库

[root@web1 ~]# yum -y install  php  php-mysql                安装PHP（php-fpm软件包在lnmp_soft中有提供）
[root@web1 ~]# yum -y install  php-fpm-5.4.16-42.el7.x86_64.rpm
修改Nginx配置文件（修改默认首页与动静分离）


部署前端Nginx调度服务器

使用源码安装nginx软件（如果Nginx软件包已存在可以忽略此步骤）
[root@proxy ~]# yum  -y  install   pcre-devel openssl-devel
[root@proxy ~]# tar -xf nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure
[root@proxy nginx-1.12.2]# make && make install

2）修改Nginx配置文件
Nginx配置文件中，通过upstream定义后端服务器地址池，默认调度策略为轮询，使用proxy_pass调用upstream定义的服务器地址池：
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..  
 upstream webs  {                           +
         server 192.168.2.100:80;           +
        server 192.168.2.200:80;             +
  }
 server  {
          listen       80;
          server_name  localhost;
          location  /  {
              proxy_pass http://webs;            +
            root   html;
            index  index.php index.html index.htm;
          }
}
3）重新加载配置文件


{1}步骤五：部署测试页面

1）部署测试页面(Web1服务器）。
测试页面可以参考lnmp_soft/php_scripts/php-memcached-demo.tar.gz。
[root@web1 ~]# cd lnmp_soft/php_scripts/
[root@web1 php_scripts]# tar -xf php-memcached-demo.tar.gz
[root@web1 php_scripts]# cd php-memcached-demo
[root@web1 php-memcached-demo]# cp -a  *  /usr/local/nginx/html/

浏览器直接访问后端服务器的测试页面（Web1服务器）。
[root@web1 ~]# firefox http://192.168.2.100            //填写账户信息
[root@web1 ~]# cd /var/lib/php/session/            //查看服务器本地的Session信息
[root@web1 ~]# ls
sess_ahilcq9bguot0vqsjtd84k7244                        //注意这里的ID是随机的
[root@web1 ~]# cat sess_ahilcq9bguot0vqsjtd84k7244

注意：可用修改index.php和home.php两个文件的内容，添加页面颜色属性，以区别后端两台不同的服务器:<body bgcolor=blue>。
3）部署测试页面(Web2服务器）。
测试页面可以参考lnmp_soft/php_scripts/php-memcached-demo.tar.gz。
[root@web2 ~]# cd lnmp_soft/php_scripts/
[root@web2 php_scripts]# tar -xf php-memcached-demo.tar.gz
[root@web2 php_scripts]# cd php-memcached-demo
[root@web2 php-memcached-demo]# cp -a  *  /usr/local/nginx/html/

4）浏览器直接访问后端服务器的测试页面（Web2服务器）。
[root@web2 ~]# firefox http://192.168.2.100             //填写账户信息
[root@web2 ~]# cd /var/lib/php/session/            //查看服务器本地的Session信息
[root@web2 ~]# ls
sess_qqek1tmel07br8f63d6v9ch401                        //注意这里的ID是随机的
[root@web2 ~]# cat sess_qqek1tmel07br8f63d6v9ch401    


PHP实现session共享
在后端LNMP服务器上部署Session共享
这些操作在两台后端Web服务器上均需要执行，以下操作以Web1（192.168.2.100）服务器为例。
1）为PHP添加memcache扩展
[root@web1 ~]# yum -y install  php-pecl-memcache
）修改PHP-FPM配置文件，并重启服务
注意，因为后端两台web服务器(web1,web2)都需要修改配置文件(下面也web为例)。
[root@web1 ~]# vim  /etc/php-fpm.d/www.conf            //修改该配置文件的两个参数
//文件的最后2行
修改前效果如下:
php_value[session.save_handler] = files
php_value[session.save_path] = /var/lib/php/session
//原始文件，默认定义Sessoin会话信息本地计算机（默认在/var/lib/php/session）
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
修改后效果如下:
php_value[session.save_handler] = memcache
php_value[session.save_path] = "tcp://192.168.2.5:11211"
//定义Session信息存储在公共的memcached服务器上，主机参数中为memcache（没有d）
//通过path参数定义公共的memcached服务器在哪（服务器的IP和端口）
[root@web1 ~]# systemctl  restart  php-fpm

两台都要改：：：：













